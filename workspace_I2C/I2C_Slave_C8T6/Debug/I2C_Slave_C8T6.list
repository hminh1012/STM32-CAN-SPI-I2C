
I2C_Slave_C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f8  080050f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080050f8  080050f8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f8  080050f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08005110  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08005110  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000871f  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af8  00000000  00000000  0002879b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a1  00000000  00000000  0002ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017415  00000000  00000000  0002b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9d6  00000000  00000000  000425f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000868d7  00000000  00000000  0004dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002494  00000000  00000000  000d48a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d6d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080050a0 	.word	0x080050a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080050a0 	.word	0x080050a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__gesf2>:
 8000ba8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bac:	e006      	b.n	8000bbc <__cmpsf2+0x4>
 8000bae:	bf00      	nop

08000bb0 <__lesf2>:
 8000bb0:	f04f 0c01 	mov.w	ip, #1
 8000bb4:	e002      	b.n	8000bbc <__cmpsf2+0x4>
 8000bb6:	bf00      	nop

08000bb8 <__cmpsf2>:
 8000bb8:	f04f 0c01 	mov.w	ip, #1
 8000bbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d011      	beq.n	8000bf8 <__cmpsf2+0x40>
 8000bd4:	b001      	add	sp, #4
 8000bd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bda:	bf18      	it	ne
 8000bdc:	ea90 0f01 	teqne	r0, r1
 8000be0:	bf58      	it	pl
 8000be2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000be6:	bf88      	it	hi
 8000be8:	17c8      	asrhi	r0, r1, #31
 8000bea:	bf38      	it	cc
 8000bec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bf0:	bf18      	it	ne
 8000bf2:	f040 0001 	orrne.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	d102      	bne.n	8000c04 <__cmpsf2+0x4c>
 8000bfe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c02:	d105      	bne.n	8000c10 <__cmpsf2+0x58>
 8000c04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c08:	d1e4      	bne.n	8000bd4 <__cmpsf2+0x1c>
 8000c0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c0e:	d0e1      	beq.n	8000bd4 <__cmpsf2+0x1c>
 8000c10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_cfrcmple>:
 8000c18:	4684      	mov	ip, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4661      	mov	r1, ip
 8000c1e:	e7ff      	b.n	8000c20 <__aeabi_cfcmpeq>

08000c20 <__aeabi_cfcmpeq>:
 8000c20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c22:	f7ff ffc9 	bl	8000bb8 <__cmpsf2>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	bf48      	it	mi
 8000c2a:	f110 0f00 	cmnmi.w	r0, #0
 8000c2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c30 <__aeabi_fcmpeq>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff fff4 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c38:	bf0c      	ite	eq
 8000c3a:	2001      	moveq	r0, #1
 8000c3c:	2000      	movne	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_fcmplt>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff ffea 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c4c:	bf34      	ite	cc
 8000c4e:	2001      	movcc	r0, #1
 8000c50:	2000      	movcs	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmple>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffe0 	bl	8000c20 <__aeabi_cfcmpeq>
 8000c60:	bf94      	ite	ls
 8000c62:	2001      	movls	r0, #1
 8000c64:	2000      	movhi	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_fcmpge>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff ffd2 	bl	8000c18 <__aeabi_cfrcmple>
 8000c74:	bf94      	ite	ls
 8000c76:	2001      	movls	r0, #1
 8000c78:	2000      	movhi	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fcmpgt>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffc8 	bl	8000c18 <__aeabi_cfrcmple>
 8000c88:	bf34      	ite	cc
 8000c8a:	2001      	movcc	r0, #1
 8000c8c:	2000      	movcs	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <process_data>:
uint8_t startPosition = 0;
uint8_t bytesRrecvd = 0;
uint8_t bytesTransd = 0;

int process_data (void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
	int startREG = RxData[0];  // get the register address
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <process_data+0x6c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	617b      	str	r3, [r7, #20]
	int numREG = bytesRrecvd;  // Get the number of registers
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <process_data+0x70>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	60bb      	str	r3, [r7, #8]
	int endREG = startREG + numREG -1;  // calculate the end register
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4413      	add	r3, r2
 8000cac:	3b01      	subs	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
	if (endREG>9)  // There are a total of 10 registers (0-9)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b09      	cmp	r3, #9
 8000cb4:	dd09      	ble.n	8000cca <process_data+0x36>
	{
		// clear everything and return
		memset(RxData,'\0',RxSIZE);
 8000cb6:	220b      	movs	r2, #11
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <process_data+0x6c>)
 8000cbc:	f004 f9c4 	bl	8005048 <memset>
		rxcount =0;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <process_data+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
		return 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e016      	b.n	8000cf8 <process_data+0x64>
	}

	int indx = 1;  // set the indx to 1 in order to start reading from RxData[1]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
	for (int i=0; i<numREG; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e00c      	b.n	8000cee <process_data+0x5a>
	{
		I2C_REGISTERS[startREG++] = RxData[indx++];  // Read the data from RxData and save it in the I2C_REGISTERS
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	1c53      	adds	r3, r2, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	1c59      	adds	r1, r3, #1
 8000cde:	6179      	str	r1, [r7, #20]
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <process_data+0x6c>)
 8000ce2:	5c89      	ldrb	r1, [r1, r2]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <process_data+0x78>)
 8000ce6:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<numREG; i++)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbee      	blt.n	8000cd4 <process_data+0x40>
	}
	return 1;  // success
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000038 	.word	0x20000038
 8000d04:	20000046 	.word	0x20000046
 8000d08:	20000043 	.word	0x20000043
 8000d0c:	2000002c 	.word	0x2000002c

08000d10 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f001 ff38 	bl	8002b8e <HAL_I2C_EnableListen_IT>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
 8000d34:	4613      	mov	r3, r2
 8000d36:	803b      	strh	r3, [r7, #0]


	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d110      	bne.n	8000d60 <HAL_I2C_AddrCallback+0x38>
	{
		RxData[0] = 0;  // reset the RxData[0] to clear any residue address from previous call
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_I2C_AddrCallback+0x70>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
		rxcount =0;
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_I2C_AddrCallback+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_FIRST_FRAME);
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_I2C_AddrCallback+0x74>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_I2C_AddrCallback+0x70>)
 8000d52:	18d1      	adds	r1, r2, r3
 8000d54:	2301      	movs	r3, #1
 8000d56:	2201      	movs	r2, #1
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f001 fea6 	bl	8002aaa <HAL_I2C_Slave_Seq_Receive_IT>
		txcount = 0;
		startPosition = RxData[0];
		RxData[0] = 0;  // Reset the start register as we have already copied it
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
	}
}
 8000d5e:	e016      	b.n	8000d8e <HAL_I2C_AddrCallback+0x66>
		txcount = 0;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_I2C_AddrCallback+0x78>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
		startPosition = RxData[0];
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_I2C_AddrCallback+0x70>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_I2C_AddrCallback+0x7c>)
 8000d6c:	701a      	strb	r2, [r3, #0]
		RxData[0] = 0;  // Reset the start register as we have already copied it
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_I2C_AddrCallback+0x70>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_FIRST_FRAME);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_I2C_AddrCallback+0x7c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_I2C_AddrCallback+0x78>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_I2C_AddrCallback+0x80>)
 8000d82:	1899      	adds	r1, r3, r2
 8000d84:	2301      	movs	r3, #1
 8000d86:	2201      	movs	r2, #1
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f001 fe1c 	bl	80029c6 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000038 	.word	0x20000038
 8000d9c:	20000043 	.word	0x20000043
 8000da0:	20000044 	.word	0x20000044
 8000da4:	20000045 	.word	0x20000045
 8000da8:	2000002c 	.word	0x2000002c

08000dac <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	txcount++;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000dbe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_REGISTERS+startPosition+txcount, 1, I2C_NEXT_FRAME);
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_I2C_SlaveTxCpltCallback+0x3c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_I2C_SlaveTxCpltCallback+0x38>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_I2C_SlaveTxCpltCallback+0x40>)
 8000dce:	1899      	adds	r1, r3, r2
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 fdf6 	bl	80029c6 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000044 	.word	0x20000044
 8000de8:	20000045 	.word	0x20000045
 8000dec:	2000002c 	.word	0x2000002c

08000df0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	rxcount++;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e02:	701a      	strb	r2, [r3, #0]
	if (rxcount < RxSIZE)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	d818      	bhi.n	8000e3e <HAL_I2C_SlaveRxCpltCallback+0x4e>
	{
		if (rxcount == RxSIZE-1)
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b0a      	cmp	r3, #10
 8000e12:	d10a      	bne.n	8000e2a <HAL_I2C_SlaveRxCpltCallback+0x3a>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_LAST_FRAME);
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000e1c:	18d1      	adds	r1, r2, r3
 8000e1e:	2320      	movs	r3, #32
 8000e20:	2201      	movs	r2, #1
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f001 fe41 	bl	8002aaa <HAL_I2C_Slave_Seq_Receive_IT>
 8000e28:	e009      	b.n	8000e3e <HAL_I2C_SlaveRxCpltCallback+0x4e>
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxData+rxcount, 1, I2C_NEXT_FRAME);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8000e32:	18d1      	adds	r1, r2, r3
 8000e34:	2304      	movs	r3, #4
 8000e36:	2201      	movs	r2, #1
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f001 fe36 	bl	8002aaa <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (rxcount == RxSIZE)
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b0b      	cmp	r3, #11
 8000e44:	d101      	bne.n	8000e4a <HAL_I2C_SlaveRxCpltCallback+0x5a>
	{
		process_data();
 8000e46:	f7ff ff25 	bl	8000c94 <process_data>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000043 	.word	0x20000043
 8000e58:	20000038 	.word	0x20000038

08000e5c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f002 f8ee 	bl	8003046 <HAL_I2C_GetError>
 8000e6a:	60f8      	str	r0, [r7, #12]

	if (errorcode == 4)  // AF error
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d119      	bne.n	8000ea6 <HAL_I2C_ErrorCallback+0x4a>
	{
		if (txcount == 0)  // error is while slave is receiving
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_I2C_ErrorCallback+0x7c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10b      	bne.n	8000e92 <HAL_I2C_ErrorCallback+0x36>
		{
			bytesRrecvd = rxcount-1;  // the first byte is the register address
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_I2C_ErrorCallback+0x80>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_I2C_ErrorCallback+0x84>)
 8000e84:	701a      	strb	r2, [r3, #0]
			rxcount = 0;  // Reset the rxcount for the next operation
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_I2C_ErrorCallback+0x80>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
			process_data();
 8000e8c:	f7ff ff02 	bl	8000c94 <process_data>
 8000e90:	e01a      	b.n	8000ec8 <HAL_I2C_ErrorCallback+0x6c>
		}
		else // error while slave is transmitting
		{
			bytesTransd = txcount-1;  // the txcount is 1 higher than the actual data transmitted
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_I2C_ErrorCallback+0x7c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_I2C_ErrorCallback+0x88>)
 8000e9c:	701a      	strb	r2, [r3, #0]
			txcount = 0;  // Reset the txcount for the next operation
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_I2C_ErrorCallback+0x7c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e010      	b.n	8000ec8 <HAL_I2C_ErrorCallback+0x6c>
	/* BERR Error commonly occurs during the Direction switch
	 * Here we the software reset bit is set by the HAL error handler
	 * Before resetting this bit, we make sure the I2C lines are released and the bus is free
	 * I am simply reinitializing the I2C to do so
	 */
	else if (errorcode == 1)  // BERR Error
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10d      	bne.n	8000ec8 <HAL_I2C_ErrorCallback+0x6c>
	{
		HAL_I2C_DeInit(hi2c);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 fd47 	bl	8002940 <HAL_I2C_DeInit>
		HAL_I2C_Init(hi2c);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f001 fc00 	bl	80026b8 <HAL_I2C_Init>
		memset(RxData,'\0',RxSIZE);  // reset the Rx buffer
 8000eb8:	220b      	movs	r2, #11
 8000eba:	2100      	movs	r1, #0
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <HAL_I2C_ErrorCallback+0x8c>)
 8000ebe:	f004 f8c3 	bl	8005048 <memset>
		rxcount =0;  // reset the count
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_I2C_ErrorCallback+0x80>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	}

	HAL_I2C_EnableListen_IT(hi2c);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 fe60 	bl	8002b8e <HAL_I2C_EnableListen_IT>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000044 	.word	0x20000044
 8000edc:	20000043 	.word	0x20000043
 8000ee0:	20000046 	.word	0x20000046
 8000ee4:	20000047 	.word	0x20000047
 8000ee8:	20000038 	.word	0x20000038

08000eec <ScaleADCToByte>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t ScaleADCToByte(uint16_t adc_value) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
      return (uint8_t)((adc_value * 255) / 4095);
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <ScaleADCToByte+0x2c>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	441a      	add	r2, r3
 8000f06:	12d2      	asrs	r2, r2, #11
 8000f08:	17db      	asrs	r3, r3, #31
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	b2db      	uxtb	r3, r3
  }
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	80080081 	.word	0x80080081
 8000f1c:	00000000 	.word	0x00000000

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fb1b 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f8a7 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f000 f96d 	bl	800120c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f32:	f000 f93d 	bl	80011b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f36:	f000 f8fd 	bl	8001134 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <main+0x130>)
 8000f3c:	f001 fe27 	bl	8002b8e <HAL_I2C_EnableListen_IT>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <main+0x2a>
  {
	  Error_Handler();
 8000f46:	f000 f9b9 	bl	80012bc <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 8000f4a:	4842      	ldr	r0, [pc, #264]	; (8001054 <main+0x134>)
 8000f4c:	f000 fc42 	bl	80017d4 <HAL_ADC_Start>
  time_start = HAL_GetTick();
 8000f50:	f000 fb5e 	bl	8001610 <HAL_GetTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a40      	ldr	r2, [pc, #256]	; (8001058 <main+0x138>)
 8000f58:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Read potentiometer via ADC
	    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000f5a:	210a      	movs	r1, #10
 8000f5c:	483d      	ldr	r0, [pc, #244]	; (8001054 <main+0x134>)
 8000f5e:	f000 fce7 	bl	8001930 <HAL_ADC_PollForConversion>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d115      	bne.n	8000f94 <main+0x74>
	        uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000f68:	483a      	ldr	r0, [pc, #232]	; (8001054 <main+0x134>)
 8000f6a:	f000 fde7 	bl	8001b3c <HAL_ADC_GetValue>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	        value_pot = ScaleADCToByte(adc_value);
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffb9 	bl	8000eec <ScaleADCToByte>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <main+0x13c>)
 8000f80:	701a      	strb	r2, [r3, #0]
	        i2c_tx_data = value_pot; // Update transmit buffer
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <main+0x13c>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <main+0x140>)
 8000f88:	701a      	strb	r2, [r3, #0]
	        I2C_REGISTERS[3] = i2c_tx_data;
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <main+0x140>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <main+0x144>)
 8000f92:	70da      	strb	r2, [r3, #3]
	    }

	    // Blink LED based on received value
	    i2c_rcv = I2C_REGISTERS[4];
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <main+0x144>)
 8000f96:	791a      	ldrb	r2, [r3, #4]
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <main+0x148>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	    float interval = (i2c_rcv == 0) ? 100 : (1000 * ((float)i2c_rcv / 255.0));
 8000f9c:	4b32      	ldr	r3, [pc, #200]	; (8001068 <main+0x148>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01e      	beq.n	8000fe2 <main+0xc2>
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <main+0x148>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fda5 	bl	8000af8 <__aeabi_ui2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa31 	bl	8000418 <__aeabi_f2d>
 8000fb6:	a324      	add	r3, pc, #144	; (adr r3, 8001048 <main+0x128>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff fbae 	bl	800071c <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <main+0x14c>)
 8000fce:	f7ff fa7b 	bl	80004c8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fc87 	bl	80008ec <__aeabi_d2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e000      	b.n	8000fe4 <main+0xc4>
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <main+0x150>)
 8000fe4:	603b      	str	r3, [r7, #0]
	    if ((HAL_GetTick() - time_start) > interval) {
 8000fe6:	f000 fb13 	bl	8001610 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <main+0x138>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fd80 	bl	8000af8 <__aeabi_ui2f>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f7ff fe21 	bl	8000c44 <__aeabi_fcmplt>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d01b      	beq.n	8001040 <main+0x120>
	        stat_LED = !stat_LED;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <main+0x154>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0x154>)
 800101a:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, stat_LED ? GPIO_PIN_RESET : GPIO_PIN_SET); // PC13 active-low
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <main+0x154>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x158>)
 8001032:	f001 fb29 	bl	8002688 <HAL_GPIO_WritePin>
	        time_start = HAL_GetTick();
 8001036:	f000 faeb 	bl	8001610 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <main+0x138>)
 800103e:	6013      	str	r3, [r2, #0]
  {
 8001040:	e78b      	b.n	8000f5a <main+0x3a>
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	00000000 	.word	0x00000000
 800104c:	406fe000 	.word	0x406fe000
 8001050:	20000078 	.word	0x20000078
 8001054:	20000048 	.word	0x20000048
 8001058:	200000cc 	.word	0x200000cc
 800105c:	200000d1 	.word	0x200000d1
 8001060:	200000d2 	.word	0x200000d2
 8001064:	2000002c 	.word	0x2000002c
 8001068:	20000000 	.word	0x20000000
 800106c:	408f4000 	.word	0x408f4000
 8001070:	42c80000 	.word	0x42c80000
 8001074:	200000d0 	.word	0x200000d0
 8001078:	40011000 	.word	0x40011000

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 ffdc 	bl	8005048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ba:	2301      	movs	r3, #1
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fa3c 	bl	8004550 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010de:	f000 f8ed 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fca8 	bl	8004a54 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800110a:	f000 f8d7 	bl	80012bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	2302      	movs	r3, #2
 8001110:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001112:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001116:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fe28 	bl	8004d70 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001126:	f000 f8c9 	bl	80012bc <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MX_ADC1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ADC1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001152:	2201      	movs	r2, #1
 8001154:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_ADC1_Init+0x74>)
 800115e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001162:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001172:	f000 fa57 	bl	8001624 <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f89e 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001180:	2309      	movs	r3, #9
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001184:	2301      	movs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001192:	f000 fcdf 	bl	8001b54 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800119c:	f000 f88e 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000048 	.word	0x20000048
 80011ac:	40012400 	.word	0x40012400

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_I2C1_Init+0x50>)
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_I2C1_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_I2C1_Init+0x50>)
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_I2C1_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ee:	f001 fa63 	bl	80026b8 <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 f860 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000078 	.word	0x20000078
 8001204:	40005400 	.word	0x40005400
 8001208:	000186a0 	.word	0x000186a0

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800123e:	f043 0320 	orr.w	r3, r3, #32
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <MX_GPIO_Init+0xa8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_GPIO_Init+0xa8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001288:	f001 f9fe 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2302      	movs	r3, #2
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_GPIO_Init+0xac>)
 80012a6:	f000 ffaf 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40011000 	.word	0x40011000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_MspInit+0x5c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_MspInit+0x5c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_MspInit+0x5c>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x5c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_MspInit+0x5c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x5c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x60>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_MspInit+0x60>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000

0800132c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_ADC_MspInit+0x6c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d121      	bne.n	8001390 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_ADC_MspInit+0x70>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_ADC_MspInit+0x70>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_ADC_MspInit+0x70>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_ADC_MspInit+0x70>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_ADC_MspInit+0x70>)
 800136a:	f043 0308 	orr.w	r3, r3, #8
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_ADC_MspInit+0x70>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_ADC_MspInit+0x74>)
 800138c:	f000 ff3c 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40012400 	.word	0x40012400
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_I2C_MspInit+0x90>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d133      	bne.n	800142c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_I2C_MspInit+0x94>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_I2C_MspInit+0x94>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_I2C_MspInit+0x94>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e0:	2312      	movs	r3, #18
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4813      	ldr	r0, [pc, #76]	; (800143c <HAL_I2C_MspInit+0x98>)
 80013f0:	f000 ff0a 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_I2C_MspInit+0x94>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_I2C_MspInit+0x94>)
 80013fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_I2C_MspInit+0x94>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	201f      	movs	r0, #31
 8001412:	f000 fe2e 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001416:	201f      	movs	r0, #31
 8001418:	f000 fe47 	bl	80020aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2020      	movs	r0, #32
 8001422:	f000 fe26 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001426:	2020      	movs	r0, #32
 8001428:	f000 fe3f 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40021000 	.word	0x40021000
 800143c:	40010c00 	.word	0x40010c00

08001440 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_I2C_MspDeInit+0x44>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d113      	bne.n	800147a <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_I2C_MspDeInit+0x48>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_I2C_MspDeInit+0x48>)
 8001458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800145c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800145e:	2140      	movs	r1, #64	; 0x40
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <HAL_I2C_MspDeInit+0x4c>)
 8001462:	f001 f855 	bl	8002510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <HAL_I2C_MspDeInit+0x4c>)
 800146a:	f001 f851 	bl	8002510 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800146e:	201f      	movs	r0, #31
 8001470:	f000 fe29 	bl	80020c6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001474:	2020      	movs	r0, #32
 8001476:	f000 fe26 	bl	80020c6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40005400 	.word	0x40005400
 8001488:	40021000 	.word	0x40021000
 800148c:	40010c00 	.word	0x40010c00

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d6:	f000 f889 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <I2C1_EV_IRQHandler+0x10>)
 80014e6:	f001 fb87 	bl	8002bf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000078 	.word	0x20000078

080014f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <I2C1_ER_IRQHandler+0x10>)
 80014fa:	f001 fcd0 	bl	8002e9e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000078 	.word	0x20000078

08001508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff fff8 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	; (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f003 fd8b 	bl	8005058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fced 	bl	8000f20 <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001550:	08005100 	.word	0x08005100
  ldr r2, =_sbss
 8001554:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001558:	200000d8 	.word	0x200000d8

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 fd73 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fea4 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fd99 	bl	80020e2 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 fd53 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000004 	.word	0x20000004
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	2000000c 	.word	0x2000000c
 800160c:	200000d4 	.word	0x200000d4

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200000d4 	.word	0x200000d4

08001624 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0be      	b.n	80017c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe62 	bl	800132c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fbc5 	bl	8001df8 <ADC_ConversionStop_Disable>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8099 	bne.w	80017b2 <HAL_ADC_Init+0x18e>
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8095 	bne.w	80017b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001690:	f023 0302 	bic.w	r3, r3, #2
 8001694:	f043 0202 	orr.w	r2, r3, #2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7b1b      	ldrb	r3, [r3, #12]
 80016aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016bc:	d003      	beq.n	80016c6 <HAL_ADC_Init+0xa2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_ADC_Init+0xa8>
 80016c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ca:	e000      	b.n	80016ce <HAL_ADC_Init+0xaa>
 80016cc:	2300      	movs	r3, #0
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7d1b      	ldrb	r3, [r3, #20]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d119      	bne.n	8001710 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	035a      	lsls	r2, r3, #13
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e00b      	b.n	8001710 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_ADC_Init+0x1a8>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	430b      	orrs	r3, r1
 8001736:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001740:	d003      	beq.n	800174a <HAL_ADC_Init+0x126>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d104      	bne.n	8001754 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	3b01      	subs	r3, #1
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	430a      	orrs	r2, r1
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_ADC_Init+0x1ac>)
 8001770:	4013      	ands	r3, r2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	d10b      	bne.n	8001790 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f023 0303 	bic.w	r3, r3, #3
 8001786:	f043 0201 	orr.w	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800178e:	e018      	b.n	80017c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f023 0312 	bic.w	r3, r3, #18
 8001798:	f043 0210 	orr.w	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b0:	e007      	b.n	80017c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	ffe1f7fd 	.word	0xffe1f7fd
 80017d0:	ff1f0efe 	.word	0xff1f0efe

080017d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Start+0x1a>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e098      	b.n	8001920 <HAL_ADC_Start+0x14c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 faa4 	bl	8001d44 <ADC_Enable>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8087 	bne.w	8001916 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a41      	ldr	r2, [pc, #260]	; (8001928 <HAL_ADC_Start+0x154>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d105      	bne.n	8001832 <HAL_ADC_Start+0x5e>
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_ADC_Start+0x158>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d115      	bne.n	800185e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d026      	beq.n	800189a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001854:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185c:	e01d      	b.n	800189a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2f      	ldr	r2, [pc, #188]	; (800192c <HAL_ADC_Start+0x158>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d004      	beq.n	800187e <HAL_ADC_Start+0xaa>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <HAL_ADC_Start+0x154>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10d      	bne.n	800189a <HAL_ADC_Start+0xc6>
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_ADC_Start+0x158>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f023 0206 	bic.w	r2, r3, #6
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b2:	e002      	b.n	80018ba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f06f 0202 	mvn.w	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018da:	d113      	bne.n	8001904 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018e0:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_ADC_Start+0x154>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_ADC_Start+0x158>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d108      	bne.n	8001904 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	e00c      	b.n	800191e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e003      	b.n	800191e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40012800 	.word	0x40012800
 800192c:	40012400 	.word	0x40012400

08001930 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001946:	f7ff fe63 	bl	8001610 <HAL_GetTick>
 800194a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f043 0220 	orr.w	r2, r3, #32
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0d3      	b.n	8001b1a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d131      	bne.n	80019e4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	d12a      	bne.n	80019e4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800198e:	e021      	b.n	80019d4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d01d      	beq.n	80019d4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_ADC_PollForConversion+0x7e>
 800199e:	f7ff fe37 	bl	8001610 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d212      	bcs.n	80019d4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0a2      	b.n	8001b1a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0d6      	beq.n	8001990 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019e2:	e070      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_ADC_PollForConversion+0x1f4>)
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	2002      	movs	r0, #2
 80019ea:	f003 fa77 	bl	8004edc <HAL_RCCEx_GetPeriphCLKFreq>
 80019ee:	4603      	mov	r3, r0
 80019f0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_ADC_PollForConversion+0x1f8>)
 80019fc:	400b      	ands	r3, r1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d118      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x104>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68d9      	ldr	r1, [r3, #12]
 8001a08:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <HAL_ADC_PollForConversion+0x1fc>)
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x104>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_ADC_PollForConversion+0x200>)
 8001a18:	400b      	ands	r3, r1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x100>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68d9      	ldr	r1, [r3, #12]
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_ADC_PollForConversion+0x204>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x100>
 8001a2c:	2314      	movs	r3, #20
 8001a2e:	e020      	b.n	8001a72 <HAL_ADC_PollForConversion+0x142>
 8001a30:	2329      	movs	r3, #41	; 0x29
 8001a32:	e01e      	b.n	8001a72 <HAL_ADC_PollForConversion+0x142>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_ADC_PollForConversion+0x200>)
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x120>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_ADC_PollForConversion+0x204>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <HAL_ADC_PollForConversion+0x13c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_ADC_PollForConversion+0x208>)
 8001a58:	400b      	ands	r3, r1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d108      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x140>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68d9      	ldr	r1, [r3, #12]
 8001a64:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_ADC_PollForConversion+0x208>)
 8001a66:	400b      	ands	r3, r1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x140>
 8001a6c:	2354      	movs	r3, #84	; 0x54
 8001a6e:	e000      	b.n	8001a72 <HAL_ADC_PollForConversion+0x142>
 8001a70:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a78:	e021      	b.n	8001abe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d01a      	beq.n	8001ab8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_ADC_PollForConversion+0x168>
 8001a88:	f7ff fdc2 	bl	8001610 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d20f      	bcs.n	8001ab8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d90b      	bls.n	8001ab8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e030      	b.n	8001b1a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d8d9      	bhi.n	8001a7a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0212 	mvn.w	r2, #18
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ae6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aea:	d115      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000004 	.word	0x20000004
 8001b28:	24924924 	.word	0x24924924
 8001b2c:	00924924 	.word	0x00924924
 8001b30:	12492492 	.word	0x12492492
 8001b34:	00492492 	.word	0x00492492
 8001b38:	00249249 	.word	0x00249249

08001b3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x20>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0dc      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1da>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d81c      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b05      	subs	r3, #5
 8001b96:	221f      	movs	r2, #31
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4019      	ands	r1, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b05      	subs	r3, #5
 8001bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbc:	e03c      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d81c      	bhi.n	8001c00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b23      	subs	r3, #35	; 0x23
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4019      	ands	r1, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b23      	subs	r3, #35	; 0x23
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfe:	e01b      	b.n	8001c38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b41      	subs	r3, #65	; 0x41
 8001c12:	221f      	movs	r2, #31
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4019      	ands	r1, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b41      	subs	r3, #65	; 0x41
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d91c      	bls.n	8001c7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b1e      	subs	r3, #30
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b1e      	subs	r3, #30
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	e019      	b.n	8001cae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6919      	ldr	r1, [r3, #16]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6898      	ldr	r0, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d003      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d132      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d125      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d126      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ce4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d11a      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	0c9a      	lsrs	r2, r3, #18
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x1b2>
 8001d12:	e007      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40012400 	.word	0x40012400
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d040      	beq.n	8001de4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <ADC_Enable+0xac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <ADC_Enable+0xb0>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d80:	e002      	b.n	8001d88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d8e:	f7ff fc3f 	bl	8001610 <HAL_GetTick>
 8001d92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	e01f      	b.n	8001dd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d96:	f7ff fc3b 	bl	8001610 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d918      	bls.n	8001dd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d011      	beq.n	8001dd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d1d8      	bne.n	8001d96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000004 	.word	0x20000004
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d12e      	bne.n	8001e70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e22:	f7ff fbf5 	bl	8001610 <HAL_GetTick>
 8001e26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	e01b      	b.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e2a:	f7ff fbf1 	bl	8001610 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d914      	bls.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10d      	bne.n	8001e62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e007      	b.n	8001e72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d0dc      	beq.n	8001e2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4906      	ldr	r1, [pc, #24]	; (8001f14 <__NVIC_EnableIRQ+0x34>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db12      	blt.n	8001f50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	490a      	ldr	r1, [pc, #40]	; (8001f5c <__NVIC_DisableIRQ+0x44>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	3320      	adds	r3, #32
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f44:	f3bf 8f4f 	dsb	sy
}
 8001f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f4a:	f3bf 8f6f 	isb	sy
}
 8001f4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff90 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff09 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff1e 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff90 	bl	8001fb4 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff11 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff1f 	bl	8001f18 <__NVIC_DisableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff94 	bl	8002018 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d005      	beq.n	8002120 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2204      	movs	r2, #4
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e051      	b.n	80021c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 020e 	bic.w	r2, r2, #14
 800212e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_DMA_Abort_IT+0xd4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d029      	beq.n	800219e <HAL_DMA_Abort_IT+0xa2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_DMA_Abort_IT+0xd8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_DMA_Abort_IT+0x9e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_DMA_Abort_IT+0xdc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01a      	beq.n	8002194 <HAL_DMA_Abort_IT+0x98>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_DMA_Abort_IT+0xe0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d012      	beq.n	800218e <HAL_DMA_Abort_IT+0x92>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_DMA_Abort_IT+0xe4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00a      	beq.n	8002188 <HAL_DMA_Abort_IT+0x8c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_DMA_Abort_IT+0xe8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d102      	bne.n	8002182 <HAL_DMA_Abort_IT+0x86>
 800217c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002180:	e00e      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 8002182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002186:	e00b      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 8002188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218c:	e008      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	e005      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 8002194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002198:	e002      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 800219a:	2310      	movs	r3, #16
 800219c:	e000      	b.n	80021a0 <HAL_DMA_Abort_IT+0xa4>
 800219e:	2301      	movs	r3, #1
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_DMA_Abort_IT+0xec>)
 80021a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
    } 
  }
  return status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020008 	.word	0x40020008
 80021d4:	4002001c 	.word	0x4002001c
 80021d8:	40020030 	.word	0x40020030
 80021dc:	40020044 	.word	0x40020044
 80021e0:	40020058 	.word	0x40020058
 80021e4:	4002006c 	.word	0x4002006c
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b08b      	sub	sp, #44	; 0x2c
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e169      	b.n	80024f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800221c:	2201      	movs	r2, #1
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 8158 	bne.w	80024ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a9a      	ldr	r2, [pc, #616]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d05e      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002244:	4a98      	ldr	r2, [pc, #608]	; (80024a8 <HAL_GPIO_Init+0x2a0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d875      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800224a:	4a98      	ldr	r2, [pc, #608]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d058      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002250:	4a96      	ldr	r2, [pc, #600]	; (80024ac <HAL_GPIO_Init+0x2a4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d86f      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002256:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <HAL_GPIO_Init+0x2a8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d052      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 800225c:	4a94      	ldr	r2, [pc, #592]	; (80024b0 <HAL_GPIO_Init+0x2a8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d869      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002262:	4a94      	ldr	r2, [pc, #592]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d04c      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002268:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_GPIO_Init+0x2ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d863      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800226e:	4a92      	ldr	r2, [pc, #584]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d046      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
 8002274:	4a90      	ldr	r2, [pc, #576]	; (80024b8 <HAL_GPIO_Init+0x2b0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d85d      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 800227a:	2b12      	cmp	r3, #18
 800227c:	d82a      	bhi.n	80022d4 <HAL_GPIO_Init+0xcc>
 800227e:	2b12      	cmp	r3, #18
 8002280:	d859      	bhi.n	8002336 <HAL_GPIO_Init+0x12e>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_GPIO_Init+0x80>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002303 	.word	0x08002303
 800228c:	080022dd 	.word	0x080022dd
 8002290:	080022ef 	.word	0x080022ef
 8002294:	08002331 	.word	0x08002331
 8002298:	08002337 	.word	0x08002337
 800229c:	08002337 	.word	0x08002337
 80022a0:	08002337 	.word	0x08002337
 80022a4:	08002337 	.word	0x08002337
 80022a8:	08002337 	.word	0x08002337
 80022ac:	08002337 	.word	0x08002337
 80022b0:	08002337 	.word	0x08002337
 80022b4:	08002337 	.word	0x08002337
 80022b8:	08002337 	.word	0x08002337
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002337 	.word	0x08002337
 80022c4:	08002337 	.word	0x08002337
 80022c8:	08002337 	.word	0x08002337
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022f9 	.word	0x080022f9
 80022d4:	4a79      	ldr	r2, [pc, #484]	; (80024bc <HAL_GPIO_Init+0x2b4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022da:	e02c      	b.n	8002336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e029      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	3304      	adds	r3, #4
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e024      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	3308      	adds	r3, #8
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e01f      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	330c      	adds	r3, #12
 80022fe:	623b      	str	r3, [r7, #32]
          break;
 8002300:	e01a      	b.n	8002338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800230a:	2304      	movs	r3, #4
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e013      	b.n	8002338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002318:	2308      	movs	r3, #8
 800231a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	611a      	str	r2, [r3, #16]
          break;
 8002322:	e009      	b.n	8002338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	615a      	str	r2, [r3, #20]
          break;
 800232e:	e003      	b.n	8002338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x130>
          break;
 8002336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d801      	bhi.n	8002342 <HAL_GPIO_Init+0x13a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_Init+0x13e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2bff      	cmp	r3, #255	; 0xff
 800234c:	d802      	bhi.n	8002354 <HAL_GPIO_Init+0x14c>
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x152>
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b08      	subs	r3, #8
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	210f      	movs	r1, #15
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80b1 	beq.w	80024ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002388:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x2b8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a0:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2bc>)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <HAL_GPIO_Init+0x2c0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_GPIO_Init+0x1ec>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3f      	ldr	r2, [pc, #252]	; (80024cc <HAL_GPIO_Init+0x2c4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d00d      	beq.n	80023f0 <HAL_GPIO_Init+0x1e8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3e      	ldr	r2, [pc, #248]	; (80024d0 <HAL_GPIO_Init+0x2c8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d007      	beq.n	80023ec <HAL_GPIO_Init+0x1e4>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <HAL_GPIO_Init+0x2cc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_GPIO_Init+0x1e0>
 80023e4:	2303      	movs	r3, #3
 80023e6:	e006      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e004      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_Init+0x1ee>
 80023f4:	2300      	movs	r3, #0
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	f002 0203 	and.w	r2, r2, #3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4093      	lsls	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002406:	492f      	ldr	r1, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x2bc>)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002420:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	492c      	ldr	r1, [pc, #176]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	4928      	ldr	r1, [pc, #160]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4922      	ldr	r1, [pc, #136]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	491e      	ldr	r1, [pc, #120]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4918      	ldr	r1, [pc, #96]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	43db      	mvns	r3, r3
 8002486:	4914      	ldr	r1, [pc, #80]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 8002488:	4013      	ands	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d021      	beq.n	80024dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e021      	b.n	80024ea <HAL_GPIO_Init+0x2e2>
 80024a6:	bf00      	nop
 80024a8:	10320000 	.word	0x10320000
 80024ac:	10310000 	.word	0x10310000
 80024b0:	10220000 	.word	0x10220000
 80024b4:	10210000 	.word	0x10210000
 80024b8:	10120000 	.word	0x10120000
 80024bc:	10110000 	.word	0x10110000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40010800 	.word	0x40010800
 80024cc:	40010c00 	.word	0x40010c00
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40011400 	.word	0x40011400
 80024d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_GPIO_Init+0x304>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4909      	ldr	r1, [pc, #36]	; (800250c <HAL_GPIO_Init+0x304>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	3301      	adds	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	fa22 f303 	lsr.w	r3, r2, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f47f ae8e 	bne.w	800221c <HAL_GPIO_Init+0x14>
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	372c      	adds	r7, #44	; 0x2c
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800251e:	e09a      	b.n	8002656 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 808d 	beq.w	8002650 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002536:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <HAL_GPIO_DeInit+0x160>)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	220f      	movs	r2, #15
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_GPIO_DeInit+0x164>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_GPIO_DeInit+0x78>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a45      	ldr	r2, [pc, #276]	; (8002678 <HAL_GPIO_DeInit+0x168>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00d      	beq.n	8002584 <HAL_GPIO_DeInit+0x74>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a44      	ldr	r2, [pc, #272]	; (800267c <HAL_GPIO_DeInit+0x16c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_DeInit+0x70>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_GPIO_DeInit+0x170>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_GPIO_DeInit+0x6c>
 8002578:	2303      	movs	r3, #3
 800257a:	e006      	b.n	800258a <HAL_GPIO_DeInit+0x7a>
 800257c:	2304      	movs	r3, #4
 800257e:	e004      	b.n	800258a <HAL_GPIO_DeInit+0x7a>
 8002580:	2302      	movs	r3, #2
 8002582:	e002      	b.n	800258a <HAL_GPIO_DeInit+0x7a>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_GPIO_DeInit+0x7a>
 8002588:	2300      	movs	r3, #0
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	429a      	cmp	r2, r3
 8002598:	d132      	bne.n	8002600 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4938      	ldr	r1, [pc, #224]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	43db      	mvns	r3, r3
 80025be:	4931      	ldr	r1, [pc, #196]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	492d      	ldr	r1, [pc, #180]	; (8002684 <HAL_GPIO_DeInit+0x174>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80025e2:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_GPIO_DeInit+0x160>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	481f      	ldr	r0, [pc, #124]	; (8002670 <HAL_GPIO_DeInit+0x160>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	400a      	ands	r2, r1
 80025fa:	3302      	adds	r3, #2
 80025fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2bff      	cmp	r3, #255	; 0xff
 8002604:	d801      	bhi.n	800260a <HAL_GPIO_DeInit+0xfa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	e001      	b.n	800260e <HAL_GPIO_DeInit+0xfe>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2bff      	cmp	r3, #255	; 0xff
 8002614:	d802      	bhi.n	800261c <HAL_GPIO_DeInit+0x10c>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_DeInit+0x112>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3b08      	subs	r3, #8
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	210f      	movs	r1, #15
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	2104      	movs	r1, #4
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	431a      	orrs	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3301      	adds	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f47f af5e 	bne.w	8002520 <HAL_GPIO_DeInit+0x10>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40010000 	.word	0x40010000
 8002674:	40010800 	.word	0x40010800
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011000 	.word	0x40011000
 8002680:	40011400 	.word	0x40011400
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e12b      	b.n	8002922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fe60 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800271c:	f002 fae2 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a81      	ldr	r2, [pc, #516]	; (800292c <HAL_I2C_Init+0x274>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d807      	bhi.n	800273c <HAL_I2C_Init+0x84>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a80      	ldr	r2, [pc, #512]	; (8002930 <HAL_I2C_Init+0x278>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e006      	b.n	800274a <HAL_I2C_Init+0x92>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a7d      	ldr	r2, [pc, #500]	; (8002934 <HAL_I2C_Init+0x27c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	bf94      	ite	ls
 8002744:	2301      	movls	r3, #1
 8002746:	2300      	movhi	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0e7      	b.n	8002922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a78      	ldr	r2, [pc, #480]	; (8002938 <HAL_I2C_Init+0x280>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_I2C_Init+0x274>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d802      	bhi.n	800278c <HAL_I2C_Init+0xd4>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	e009      	b.n	80027a0 <HAL_I2C_Init+0xe8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_I2C_Init+0x284>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	495c      	ldr	r1, [pc, #368]	; (800292c <HAL_I2C_Init+0x274>)
 80027bc:	428b      	cmp	r3, r1
 80027be:	d819      	bhi.n	80027f4 <HAL_I2C_Init+0x13c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d4:	400b      	ands	r3, r1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_I2C_Init+0x138>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e59      	subs	r1, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	e051      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e04f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <HAL_I2C_Init+0x168>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e012      	b.n	8002846 <HAL_I2C_Init+0x18e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	0099      	lsls	r1, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x196>
 800284a:	2301      	movs	r3, #1
 800284c:	e022      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10e      	bne.n	8002874 <HAL_I2C_Init+0x1bc>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e58      	subs	r0, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6859      	ldr	r1, [r3, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	440b      	add	r3, r1
 8002864:	fbb0 f3f3 	udiv	r3, r0, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002872:	e00f      	b.n	8002894 <HAL_I2C_Init+0x1dc>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e58      	subs	r0, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	0099      	lsls	r1, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	6809      	ldr	r1, [r1, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6911      	ldr	r1, [r2, #16]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68d2      	ldr	r2, [r2, #12]
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	000186a0 	.word	0x000186a0
 8002930:	001e847f 	.word	0x001e847f
 8002934:	003d08ff 	.word	0x003d08ff
 8002938:	431bde83 	.word	0x431bde83
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e021      	b.n	8002996 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fd68 	bl	8001440 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	2b80      	cmp	r3, #128	; 0x80
 80029b2:	d103      	bne.n	80029bc <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  }
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029e2:	2b28      	cmp	r3, #40	; 0x28
 80029e4:	d15b      	bne.n	8002a9e <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e054      	b.n	8002aa0 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e04d      	b.n	8002aa0 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d007      	beq.n	8002a2a <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a38:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2229      	movs	r2, #41	; 0x29
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002a98:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ac6:	2b28      	cmp	r3, #40	; 0x28
 8002ac8:	d15b      	bne.n	8002b82 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e054      	b.n	8002b84 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e04d      	b.n	8002b84 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d007      	beq.n	8002b0e <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	222a      	movs	r2, #42	; 0x2a
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b7c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d124      	bne.n	8002bec <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2228      	movs	r2, #40	; 0x28
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d007      	beq.n	8002bc8 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002be6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d003      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x38>
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	f040 80b1 	bne.w	8002d92 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c50:	d003      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0x62>
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_EV_IRQHandler+0x66>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_I2C_EV_IRQHandler+0x68>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	f000 8114 	beq.w	8002e8e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x90>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f001 fc4e 	bl	800451c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fd4e 	bl	8003722 <I2C_Master_SB>
 8002c86:	e083      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0xac>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fdc5 	bl	800382c <I2C_Master_ADD10>
 8002ca2:	e075      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0xc8>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fde0 	bl	800387e <I2C_Master_ADDR>
 8002cbe:	e067      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd8:	f000 80db 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_I2C_EV_IRQHandler+0x10a>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_I2C_EV_IRQHandler+0x10a>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9ae 	bl	800305c <I2C_MasterTransmit_TXE>
 8002d00:	e046      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80c2 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80bc 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	2b21      	cmp	r3, #33	; 0x21
 8002d1e:	d103      	bne.n	8002d28 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa37 	bl	8003194 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d26:	e0b4      	b.n	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	f040 80b1 	bne.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 faa5 	bl	8003280 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d36:	e0ac      	b.n	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d46:	f000 80a4 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <HAL_I2C_EV_IRQHandler+0x178>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_I2C_EV_IRQHandler+0x178>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fb21 	bl	80033b0 <I2C_MasterReceive_RXNE>
 8002d6e:	e00f      	b.n	8002d90 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 808b 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8085 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fbd9 	bl	8003540 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8e:	e080      	b.n	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d90:	e07f      	b.n	8002e92 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e007      	b.n	8002db4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d011      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00c      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002dd8:	69b9      	ldr	r1, [r7, #24]
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 ffa6 	bl	8003d2c <I2C_Slave_ADDR>
 8002de0:	e05a      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0x206>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 ffe0 	bl	8003dbc <I2C_Slave_STOPF>
 8002dfc:	e04c      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dfe:	7bbb      	ldrb	r3, [r7, #14]
 8002e00:	2b21      	cmp	r3, #33	; 0x21
 8002e02:	d002      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x212>
 8002e04:	7bbb      	ldrb	r3, [r7, #14]
 8002e06:	2b29      	cmp	r3, #41	; 0x29
 8002e08:	d120      	bne.n	8002e4c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x238>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_I2C_EV_IRQHandler+0x238>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fec3 	bl	8003bb4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e2e:	e032      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d02d      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x29e>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d028      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fef2 	bl	8003c2e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e4a:	e024      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x27a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x27a>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 feff 	bl	8003c6e <I2C_SlaveReceive_RXNE>
 8002e70:	e012      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 ff2f 	bl	8003cea <I2C_SlaveReceive_BTF>
 8002e8c:	e004      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	; 0x28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_I2C_ER_IRQHandler+0x5a>
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ee6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_ER_IRQHandler+0x80>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03e      	beq.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x108>
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d039      	beq.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002f32:	7efb      	ldrb	r3, [r7, #27]
 8002f34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f4c:	7ebb      	ldrb	r3, [r7, #26]
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d112      	bne.n	8002f78 <HAL_I2C_ER_IRQHandler+0xda>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10f      	bne.n	8002f78 <HAL_I2C_ER_IRQHandler+0xda>
 8002f58:	7cfb      	ldrb	r3, [r7, #19]
 8002f5a:	2b21      	cmp	r3, #33	; 0x21
 8002f5c:	d008      	beq.n	8002f70 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b29      	cmp	r3, #41	; 0x29
 8002f62:	d005      	beq.n	8002f70 <HAL_I2C_ER_IRQHandler+0xd2>
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b28      	cmp	r3, #40	; 0x28
 8002f68:	d106      	bne.n	8002f78 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b21      	cmp	r3, #33	; 0x21
 8002f6e:	d103      	bne.n	8002f78 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 f853 	bl	800401c <I2C_Slave_AF>
 8002f76:	e016      	b.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f8a:	7efb      	ldrb	r3, [r7, #27]
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d002      	beq.n	8002f96 <HAL_I2C_ER_IRQHandler+0xf8>
 8002f90:	7efb      	ldrb	r3, [r7, #27]
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_I2C_ER_IRQHandler+0x12e>
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002fca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f001 f890 	bl	8004104 <I2C_ITError>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003072:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d150      	bne.n	8003124 <I2C_MasterTransmit_TXE+0xc8>
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b21      	cmp	r3, #33	; 0x21
 8003086:	d14d      	bne.n	8003124 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d01d      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b20      	cmp	r3, #32
 8003092:	d01a      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800309a:	d016      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2211      	movs	r2, #17
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff92 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c8:	e060      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d107      	bne.n	8003114 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff7f 	bl	8003010 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003112:	e03b      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff65 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003122:	e033      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b21      	cmp	r3, #33	; 0x21
 8003128:	d005      	beq.n	8003136 <I2C_MasterTransmit_TXE+0xda>
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d12d      	bne.n	800318c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	d12a      	bne.n	800318c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003150:	e01c      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d103      	bne.n	8003166 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f88e 	bl	8003280 <I2C_MemoryTransmit_TXE_BTF>
}
 8003164:	e012      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318a:	e7ff      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d164      	bne.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031dc:	e04c      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d01d      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d01a      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f0:	d016      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003200:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2211      	movs	r2, #17
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fee7 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
}
 800321e:	e02b      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d107      	bne.n	800326a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fed4 	bl	8003010 <HAL_I2C_MemTxCpltCallback>
}
 8003268:	e006      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff feba 	bl	8002fec <HAL_I2C_MasterTxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11d      	bne.n	80032d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d10b      	bne.n	80032b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80032b6:	e077      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	b29b      	uxth	r3, r3
 80032be:	121b      	asrs	r3, r3, #8
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032d2:	e069      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10b      	bne.n	80032f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032f2:	e059      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d152      	bne.n	80033a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b22      	cmp	r3, #34	; 0x22
 8003300:	d10d      	bne.n	800331e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800331c:	e044      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d112      	bne.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003352:	e029      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d124      	bne.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d121      	bne.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003372:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fe38 	bl	8003010 <HAL_I2C_MemTxCpltCallback>
}
 80033a0:	e002      	b.n	80033a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fafb 	bl	800299e <I2C_Flush_DR>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b22      	cmp	r3, #34	; 0x22
 80033c2:	f040 80b9 	bne.w	8003538 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d921      	bls.n	800341e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b03      	cmp	r3, #3
 8003408:	f040 8096 	bne.w	8003538 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800341c:	e08c      	b.n	8003538 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	2b02      	cmp	r3, #2
 8003424:	d07f      	beq.n	8003526 <I2C_MasterReceive_RXNE+0x176>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d002      	beq.n	8003432 <I2C_MasterReceive_RXNE+0x82>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d179      	bne.n	8003526 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 f840 	bl	80044b8 <I2C_WaitOnSTOPRequestThroughIT>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d14c      	bne.n	80034d8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d10a      	bne.n	80034ae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fdbb 	bl	8003022 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ac:	e044      	b.n	8003538 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d002      	beq.n	80034c2 <I2C_MasterReceive_RXNE+0x112>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d103      	bne.n	80034ca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
 80034c8:	e002      	b.n	80034d0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2212      	movs	r2, #18
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fd94 	bl	8002ffe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034d6:	e02f      	b.n	8003538 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fc9c 	bl	8000e5c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003524:	e008      	b.n	8003538 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003534:	605a      	str	r2, [r3, #4]
}
 8003536:	e7ff      	b.n	8003538 <I2C_MasterReceive_RXNE+0x188>
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b04      	cmp	r3, #4
 8003556:	d11b      	bne.n	8003590 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003566:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800358e:	e0c4      	b.n	800371a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d129      	bne.n	80035ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d00a      	beq.n	80035c6 <I2C_MasterReceive_BTF+0x86>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d007      	beq.n	80035c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035ec:	e095      	b.n	800371a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d17d      	bne.n	80036f4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d002      	beq.n	8003604 <I2C_MasterReceive_BTF+0xc4>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b10      	cmp	r3, #16
 8003602:	d108      	bne.n	8003616 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e016      	b.n	8003644 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d002      	beq.n	8003622 <I2C_MasterReceive_BTF+0xe2>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d108      	bne.n	8003634 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800369e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d10a      	bne.n	80036ca <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fcad 	bl	8003022 <HAL_I2C_MemRxCpltCallback>
}
 80036c8:	e027      	b.n	800371a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d002      	beq.n	80036de <I2C_MasterReceive_BTF+0x19e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d103      	bne.n	80036e6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
 80036e4:	e002      	b.n	80036ec <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2212      	movs	r2, #18
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fc86 	bl	8002ffe <HAL_I2C_MasterRxCpltCallback>
}
 80036f2:	e012      	b.n	800371a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d117      	bne.n	8003766 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800374e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003750:	e067      	b.n	8003822 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]
}
 8003764:	e05d      	b.n	8003822 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376e:	d133      	bne.n	80037d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b21      	cmp	r3, #33	; 0x21
 800377a:	d109      	bne.n	8003790 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800378c:	611a      	str	r2, [r3, #16]
 800378e:	e008      	b.n	80037a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	b2da      	uxtb	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <I2C_Master_SB+0x92>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d108      	bne.n	80037c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d032      	beq.n	8003822 <I2C_Master_SB+0x100>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d02d      	beq.n	8003822 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]
}
 80037d6:	e024      	b.n	8003822 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10e      	bne.n	80037fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	11db      	asrs	r3, r3, #7
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0306 	and.w	r3, r3, #6
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f063 030f 	orn	r3, r3, #15
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]
}
 80037fc:	e011      	b.n	8003822 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10d      	bne.n	8003822 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	b29b      	uxth	r3, r3
 800380c:	11db      	asrs	r3, r3, #7
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0306 	and.w	r3, r3, #6
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f063 030e 	orn	r3, r3, #14
 800381a:	b2da      	uxtb	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	b2da      	uxtb	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <I2C_Master_ADD10+0x26>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <I2C_Master_ADD10+0x48>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003872:	605a      	str	r2, [r3, #4]
  }
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800387e:	b480      	push	{r7}
 8003880:	b091      	sub	sp, #68	; 0x44
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800388c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b22      	cmp	r3, #34	; 0x22
 80038a6:	f040 8174 	bne.w	8003b92 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10f      	bne.n	80038d2 <I2C_Master_ADDR+0x54>
 80038b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d10b      	bne.n	80038d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	e16b      	b.n	8003baa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11d      	bne.n	8003916 <I2C_Master_ADDR+0x98>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038e2:	d118      	bne.n	8003916 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	651a      	str	r2, [r3, #80]	; 0x50
 8003914:	e149      	b.n	8003baa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d113      	bne.n	8003948 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	e120      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	f040 808a 	bne.w	8003a68 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800395a:	d137      	bne.n	80039cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d113      	bne.n	80039a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	e0f2      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e0de      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d02e      	beq.n	8003a30 <I2C_Master_ADDR+0x1b2>
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d02b      	beq.n	8003a30 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2b12      	cmp	r3, #18
 80039dc:	d102      	bne.n	80039e4 <I2C_Master_ADDR+0x166>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d125      	bne.n	8003a30 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00e      	beq.n	8003a08 <I2C_Master_ADDR+0x18a>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00b      	beq.n	8003a08 <I2C_Master_ADDR+0x18a>
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d008      	beq.n	8003a08 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a16:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	e0ac      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e090      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d158      	bne.n	8003b24 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d021      	beq.n	8003abc <I2C_Master_ADDR+0x23e>
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d01e      	beq.n	8003abc <I2C_Master_ADDR+0x23e>
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d01b      	beq.n	8003abc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e012      	b.n	8003ae2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af0:	d14b      	bne.n	8003b8a <I2C_Master_ADDR+0x30c>
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af8:	d00b      	beq.n	8003b12 <I2C_Master_ADDR+0x294>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d008      	beq.n	8003b12 <I2C_Master_ADDR+0x294>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d005      	beq.n	8003b12 <I2C_Master_ADDR+0x294>
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d002      	beq.n	8003b12 <I2C_Master_ADDR+0x294>
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d13b      	bne.n	8003b8a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e032      	b.n	8003b8a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b32:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d117      	bne.n	8003b74 <I2C_Master_ADDR+0x2f6>
 8003b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4a:	d00b      	beq.n	8003b64 <I2C_Master_ADDR+0x2e6>
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d008      	beq.n	8003b64 <I2C_Master_ADDR+0x2e6>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d005      	beq.n	8003b64 <I2C_Master_ADDR+0x2e6>
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d002      	beq.n	8003b64 <I2C_Master_ADDR+0x2e6>
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d107      	bne.n	8003b74 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b90:	e00b      	b.n	8003baa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
}
 8003ba8:	e7ff      	b.n	8003baa <I2C_Master_ADDR+0x32c>
 8003baa:	bf00      	nop
 8003bac:	3744      	adds	r7, #68	; 0x44
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02b      	beq.n	8003c26 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d114      	bne.n	8003c26 <I2C_SlaveTransmit_TXE+0x72>
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b29      	cmp	r3, #41	; 0x29
 8003c00:	d111      	bne.n	8003c26 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2228      	movs	r2, #40	; 0x28
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fd f8c3 	bl	8000dac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d011      	beq.n	8003c64 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02c      	beq.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d114      	bne.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b2a      	cmp	r3, #42	; 0x2a
 8003cbc:	d111      	bne.n	8003ce2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2222      	movs	r2, #34	; 0x22
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2228      	movs	r2, #40	; 0x28
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fd f887 	bl	8000df0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d46:	2b28      	cmp	r3, #40	; 0x28
 8003d48:	d125      	bne.n	8003d96 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d58:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	81bb      	strh	r3, [r7, #12]
 8003d78:	e002      	b.n	8003d80 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d88:	89ba      	ldrh	r2, [r7, #12]
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fc ffca 	bl	8000d28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d94:	e00e      	b.n	8003db4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dda:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d172      	bne.n	8003f00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b22      	cmp	r3, #34	; 0x22
 8003e1e:	d002      	beq.n	8003e26 <I2C_Slave_STOPF+0x6a>
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b2a      	cmp	r3, #42	; 0x2a
 8003e24:	d135      	bne.n	8003e92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe f9c4 	bl	80021ec <HAL_DMA_GetState>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d049      	beq.n	8003efe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4a69      	ldr	r2, [pc, #420]	; (8004014 <I2C_Slave_STOPF+0x258>)
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f940 	bl	80020fc <HAL_DMA_Abort_IT>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03d      	beq.n	8003efe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e90:	e035      	b.n	8003efe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe f98e 	bl	80021ec <HAL_DMA_GetState>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d014      	beq.n	8003f00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <I2C_Slave_STOPF+0x258>)
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f90a 	bl	80020fc <HAL_DMA_Abort_IT>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4798      	blx	r3
 8003efc:	e000      	b.n	8003f00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003efe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03e      	beq.n	8003f88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d112      	bne.n	8003f3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d112      	bne.n	8003f72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f043 0204 	orr.w	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8b7 	bl	8004104 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f96:	e039      	b.n	800400c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9c:	d109      	bne.n	8003fb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2228      	movs	r2, #40	; 0x28
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fc ff1f 	bl	8000df0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b28      	cmp	r3, #40	; 0x28
 8003fbc:	d111      	bne.n	8003fe2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	; (8004018 <I2C_Slave_STOPF+0x25c>)
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fe98 	bl	8000d10 <HAL_I2C_ListenCpltCallback>
}
 8003fe0:	e014      	b.n	800400c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	2b22      	cmp	r3, #34	; 0x22
 8003fe8:	d002      	beq.n	8003ff0 <I2C_Slave_STOPF+0x234>
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b22      	cmp	r3, #34	; 0x22
 8003fee:	d10d      	bne.n	800400c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc fef2 	bl	8000df0 <HAL_I2C_SlaveRxCpltCallback>
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08004369 	.word	0x08004369
 8004018:	ffff0000 	.word	0xffff0000

0800401c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d002      	beq.n	800403e <I2C_Slave_AF+0x22>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d129      	bne.n	8004092 <I2C_Slave_AF+0x76>
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b28      	cmp	r3, #40	; 0x28
 8004042:	d126      	bne.n	8004092 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <I2C_Slave_AF+0xe4>)
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004058:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004062:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004072:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fe40 	bl	8000d10 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004090:	e031      	b.n	80040f6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b21      	cmp	r3, #33	; 0x21
 8004096:	d129      	bne.n	80040ec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <I2C_Slave_AF+0xe4>)
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe fc5d 	bl	800299e <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fc fe61 	bl	8000dac <HAL_I2C_SlaveTxCpltCallback>
}
 80040ea:	e004      	b.n	80040f6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	ffff0000 	.word	0xffff0000

08004104 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	2b10      	cmp	r3, #16
 8004120:	d002      	beq.n	8004128 <I2C_ITError+0x24>
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d10a      	bne.n	800413e <I2C_ITError+0x3a>
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b22      	cmp	r3, #34	; 0x22
 800412c:	d107      	bne.n	800413e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004144:	2b28      	cmp	r3, #40	; 0x28
 8004146:	d107      	bne.n	8004158 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2228      	movs	r2, #40	; 0x28
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004156:	e015      	b.n	8004184 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d00a      	beq.n	800417e <I2C_ITError+0x7a>
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b60      	cmp	r3, #96	; 0x60
 800416c:	d007      	beq.n	800417e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d162      	bne.n	800425a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d020      	beq.n	80041f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	4a6a      	ldr	r2, [pc, #424]	; (8004360 <I2C_ITError+0x25c>)
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd ff9c 	bl	80020fc <HAL_DMA_Abort_IT>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8089 	beq.w	80042de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ee:	4610      	mov	r0, r2
 80041f0:	4798      	blx	r3
 80041f2:	e074      	b.n	80042de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	4a59      	ldr	r2, [pc, #356]	; (8004360 <I2C_ITError+0x25c>)
 80041fa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd ff7b 	bl	80020fc <HAL_DMA_Abort_IT>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d068      	beq.n	80042de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d10b      	bne.n	8004232 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004254:	4610      	mov	r0, r2
 8004256:	4798      	blx	r3
 8004258:	e041      	b.n	80042de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b60      	cmp	r3, #96	; 0x60
 8004264:	d125      	bne.n	80042b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d10b      	bne.n	800429a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe fec2 	bl	8003034 <HAL_I2C_AbortCpltCallback>
 80042b0:	e015      	b.n	80042de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d10b      	bne.n	80042d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fc fdbf 	bl	8000e5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10e      	bne.n	800430c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d113      	bne.n	8004358 <I2C_ITError+0x254>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b28      	cmp	r3, #40	; 0x28
 8004334:	d110      	bne.n	8004358 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <I2C_ITError+0x260>)
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fcdc 	bl	8000d10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08004369 	.word	0x08004369
 8004364:	ffff0000 	.word	0xffff0000

08004368 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004382:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <I2C_DMAAbort+0x148>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	4a4a      	ldr	r2, [pc, #296]	; (80044b4 <I2C_DMAAbort+0x14c>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	0a1a      	lsrs	r2, r3, #8
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	00da      	lsls	r2, r3, #3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80043ae:	e00a      	b.n	80043c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c4:	d0ea      	beq.n	800439c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	2200      	movs	r2, #0
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2200      	movs	r2, #0
 800441a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b60      	cmp	r3, #96	; 0x60
 8004436:	d10e      	bne.n	8004456 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f7fe fdf0 	bl	8003034 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004454:	e027      	b.n	80044a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800445c:	2b28      	cmp	r3, #40	; 0x28
 800445e:	d117      	bne.n	8004490 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800447e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2228      	movs	r2, #40	; 0x28
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800448e:	e007      	b.n	80044a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80044a0:	6978      	ldr	r0, [r7, #20]
 80044a2:	f7fc fcdb 	bl	8000e5c <HAL_I2C_ErrorCallback>
}
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000004 	.word	0x20000004
 80044b4:	14f8b589 	.word	0x14f8b589

080044b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	4a13      	ldr	r2, [pc, #76]	; (8004518 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	0a1a      	lsrs	r2, r3, #8
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e008      	b.n	8004508 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d0e9      	beq.n	80044da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000004 	.word	0x20000004
 8004518:	14f8b589 	.word	0x14f8b589

0800451c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800452c:	d103      	bne.n	8004536 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004534:	e007      	b.n	8004546 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800453e:	d102      	bne.n	8004546 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2208      	movs	r2, #8
 8004544:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e272      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004570:	4b92      	ldr	r3, [pc, #584]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00c      	beq.n	8004596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800457c:	4b8f      	ldr	r3, [pc, #572]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d112      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
 8004588:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d10b      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004596:	4b89      	ldr	r3, [pc, #548]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d06c      	beq.n	800467c <HAL_RCC_OscConfig+0x12c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d168      	bne.n	800467c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e24c      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x76>
 80045b8:	4b80      	ldr	r3, [pc, #512]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7a      	ldr	r2, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a77      	ldr	r2, [pc, #476]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0xbc>
 80045f2:	4b72      	ldr	r3, [pc, #456]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a71      	ldr	r2, [pc, #452]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 800460c:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6a      	ldr	r2, [pc, #424]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fc fff0 	bl	8001610 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fc ffec 	bl	8001610 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e200      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xe4>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc ffdc 	bl	8001610 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fc ffd8 	bl	8001610 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1ec      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x10c>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1c0      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4939      	ldr	r1, [pc, #228]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc ff91 	bl	8001610 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fc ff8d 	bl	8001610 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1a1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4927      	ldr	r1, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc ff70 	bl	8001610 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fc ff6c 	bl	8001610 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e180      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fc ff50 	bl	8001610 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fc ff4c 	bl	8001610 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e160      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f000 face 	bl	8004d34 <RCC_Delay>
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7fc ff36 	bl	8001610 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a6:	e00f      	b.n	80047c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fc ff32 	bl	8001610 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d908      	bls.n	80047c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e146      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	42420000 	.word	0x42420000
 80047c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e9      	bne.n	80047a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a6 	beq.w	800492e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a87      	ldr	r2, [pc, #540]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
 80047fe:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480e:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fc fef3 	bl	8001610 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fc feef 	bl	8001610 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e103      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x312>
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	e02d      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x334>
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4a69      	ldr	r2, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6213      	str	r3, [r2, #32]
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6213      	str	r3, [r2, #32]
 8004882:	e01c      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x356>
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fea3 	bl	8001610 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fc fe9f 	bl	8001610 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0b1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCC_OscConfig+0x37e>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fe8d 	bl	8001610 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fc fe89 	bl	8001610 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ee      	bne.n	80048fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d061      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d146      	bne.n	80049da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fc fe5d 	bl	8001610 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fc fe59 	bl	8001610 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e06d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496c:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4921      	ldr	r1, [pc, #132]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a19      	ldr	r1, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	430b      	orrs	r3, r1
 80049a6:	491b      	ldr	r1, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fc fe2d 	bl	8001610 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fc fe29 	bl	8001610 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x46a>
 80049d8:	e035      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fc fe16 	bl	8001610 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fe12 	bl	8001610 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e026      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x498>
 8004a06:	e01e      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e019      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x500>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d0      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4965      	ldr	r1, [pc, #404]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d040      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d115      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e073      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06b      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4936      	ldr	r1, [pc, #216]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fd64 	bl	8001610 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fc fd60 	bl	8001610 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e053      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d210      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 0207 	bic.w	r2, r3, #7
 8004b8a:	4922      	ldr	r1, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_ClockConfig+0x1cc>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc fcc2 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	080050b8 	.word	0x080050b8
 8004c20:	20000004 	.word	0x20000004
 8004c24:	20000008 	.word	0x20000008

08004c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x30>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x36>
 8004c56:	e027      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5a:	613b      	str	r3, [r7, #16]
      break;
 8004c5c:	e027      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0c5b      	lsrs	r3, r3, #17
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	fb03 f202 	mul.w	r2, r3, r2
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e004      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	613b      	str	r3, [r7, #16]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004caa:	613b      	str	r3, [r7, #16]
      break;
 8004cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cae:	693b      	ldr	r3, [r7, #16]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	080050d0 	.word	0x080050d0
 8004cc8:	080050e0 	.word	0x080050e0
 8004ccc:	003d0900 	.word	0x003d0900

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	20000004 	.word	0x20000004

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff2 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	080050c8 	.word	0x080050c8

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffde 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	080050c8 	.word	0x080050c8

08004d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCC_Delay+0x34>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <RCC_Delay+0x38>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0a5b      	lsrs	r3, r3, #9
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d50:	bf00      	nop
  }
  while (Delay --);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <RCC_Delay+0x1c>
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	20000004 	.word	0x20000004
 8004d6c:	10624dd3 	.word	0x10624dd3

08004d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d07d      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4a4b      	ldr	r2, [pc, #300]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	61d3      	str	r3, [r2, #28]
 8004da8:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d118      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc4:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fc1e 	bl	8001610 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fc fc1a 	bl	8001610 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e06d      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02e      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d027      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d014      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fbe9 	bl	8001610 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fc fbe5 	bl	8001610 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e036      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ee      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	490b      	ldr	r1, [pc, #44]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
 8004ed8:	42420440 	.word	0x42420440

08004edc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	f200 808a 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d045      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d075      	beq.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f12:	e082      	b.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004f14:	4b46      	ldr	r3, [pc, #280]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f1a:	4b45      	ldr	r3, [pc, #276]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d07b      	beq.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	0c9b      	lsrs	r3, r3, #18
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	4a41      	ldr	r2, [pc, #260]	; (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
 8004f32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f3e:	4b3c      	ldr	r3, [pc, #240]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	0c5b      	lsrs	r3, r3, #17
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004f4a:	5cd3      	ldrb	r3, [r2, r3]
 8004f4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f58:	4a38      	ldr	r2, [pc, #224]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	e004      	b.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
 8004f72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f74:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f80:	d102      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	61bb      	str	r3, [r7, #24]
      break;
 8004f86:	e04a      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	085b      	lsrs	r3, r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
      break;
 8004f96:	e042      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e01f      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d109      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004fd4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e00f      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fe6:	d11c      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d016      	beq.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ff4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ff8:	61bb      	str	r3, [r7, #24]
      break;
 8004ffa:	e012      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ffc:	e011      	b.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ffe:	f7ff fe85 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0b9b      	lsrs	r3, r3, #14
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	3301      	adds	r3, #1
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	61bb      	str	r3, [r7, #24]
      break;
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005022:	bf00      	nop
    }
  }
  return (frequency);
 8005024:	69bb      	ldr	r3, [r7, #24]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	080050e4 	.word	0x080050e4
 8005038:	080050f4 	.word	0x080050f4
 800503c:	007a1200 	.word	0x007a1200
 8005040:	003d0900 	.word	0x003d0900
 8005044:	aaaaaaab 	.word	0xaaaaaaab

08005048 <memset>:
 8005048:	4603      	mov	r3, r0
 800504a:	4402      	add	r2, r0
 800504c:	4293      	cmp	r3, r2
 800504e:	d100      	bne.n	8005052 <memset+0xa>
 8005050:	4770      	bx	lr
 8005052:	f803 1b01 	strb.w	r1, [r3], #1
 8005056:	e7f9      	b.n	800504c <memset+0x4>

08005058 <__libc_init_array>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	2600      	movs	r6, #0
 800505c:	4d0c      	ldr	r5, [pc, #48]	; (8005090 <__libc_init_array+0x38>)
 800505e:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <__libc_init_array+0x3c>)
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	42a6      	cmp	r6, r4
 8005066:	d109      	bne.n	800507c <__libc_init_array+0x24>
 8005068:	f000 f81a 	bl	80050a0 <_init>
 800506c:	2600      	movs	r6, #0
 800506e:	4d0a      	ldr	r5, [pc, #40]	; (8005098 <__libc_init_array+0x40>)
 8005070:	4c0a      	ldr	r4, [pc, #40]	; (800509c <__libc_init_array+0x44>)
 8005072:	1b64      	subs	r4, r4, r5
 8005074:	10a4      	asrs	r4, r4, #2
 8005076:	42a6      	cmp	r6, r4
 8005078:	d105      	bne.n	8005086 <__libc_init_array+0x2e>
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005080:	4798      	blx	r3
 8005082:	3601      	adds	r6, #1
 8005084:	e7ee      	b.n	8005064 <__libc_init_array+0xc>
 8005086:	f855 3b04 	ldr.w	r3, [r5], #4
 800508a:	4798      	blx	r3
 800508c:	3601      	adds	r6, #1
 800508e:	e7f2      	b.n	8005076 <__libc_init_array+0x1e>
 8005090:	080050f8 	.word	0x080050f8
 8005094:	080050f8 	.word	0x080050f8
 8005098:	080050f8 	.word	0x080050f8
 800509c:	080050fc 	.word	0x080050fc

080050a0 <_init>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr

080050ac <_fini>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr
