
TUT_CAN_LOOPBACK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002630  08002630  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002630  08002630  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002630  08002630  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000014  0800264c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800264c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006415  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015c8  00000000  00000000  00026495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00027a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054f  00000000  00000000  00028180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162fe  00000000  00000000  000286cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007580  00000000  00000000  0003e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000803c1  00000000  00000000  00045f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c34  00000000  00000000  000c6310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c7f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080025f0 	.word	0x080025f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080025f0 	.word	0x080025f0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fac8 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82e 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f902 	bl	8000360 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f86c 	bl	8000238 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8d4 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.StdId = 0x124;
 8000164:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <main+0x5c>)
 8000166:	f44f 7292 	mov.w	r2, #292	; 0x124
 800016a:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800016c:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <main+0x5c>)
 800016e:	2200      	movs	r2, #0
 8000170:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000172:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <main+0x5c>)
 8000174:	2200      	movs	r2, #0
 8000176:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000178:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <main+0x5c>)
 800017a:	2208      	movs	r2, #8
 800017c:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800017e:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <main+0x5c>)
 8000180:	2200      	movs	r2, #0
 8000182:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TxData[6] --; /* Increment the last byte */
 8000184:	4b09      	ldr	r3, [pc, #36]	; (80001ac <main+0x60>)
 8000186:	799b      	ldrb	r3, [r3, #6]
 8000188:	3b01      	subs	r3, #1
 800018a:	b2da      	uxtb	r2, r3
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <main+0x60>)
 800018e:	719a      	strb	r2, [r3, #6]

      /* It's mandatory to look for a free Tx mail box */
	  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0); /* Wait till a Tx mailbox is free. Using while loop instead of HAL_Delay() */
 8000190:	bf00      	nop
 8000192:	4807      	ldr	r0, [pc, #28]	; (80001b0 <main+0x64>)
 8000194:	f000 fe0e 	bl	8000db4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0f9      	beq.n	8000192 <main+0x46>
      HAL_Delay(1000);
 800019e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a2:	f000 fb01 	bl	80007a8 <HAL_Delay>
	  TxData[6] --; /* Increment the last byte */
 80001a6:	e7ed      	b.n	8000184 <main+0x38>
 80001a8:	20000098 	.word	0x20000098
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000030 	.word	0x20000030

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 f9e8 	bl	8002598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e6:	2300      	movs	r3, #0
 80001e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fbfd 	bl	80019f4 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000200:	f000 f914 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fe6a 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022a:	f000 f8ff 	bl	800042c <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <MX_CAN_Init+0xcc>)
 8000240:	4a31      	ldr	r2, [pc, #196]	; (8000308 <MX_CAN_Init+0xd0>)
 8000242:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000244:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <MX_CAN_Init+0xcc>)
 8000246:	2204      	movs	r2, #4
 8000248:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800024a:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <MX_CAN_Init+0xcc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000250:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <MX_CAN_Init+0xcc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000256:	4b2b      	ldr	r3, [pc, #172]	; (8000304 <MX_CAN_Init+0xcc>)
 8000258:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800025c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800025e:	4b29      	ldr	r3, [pc, #164]	; (8000304 <MX_CAN_Init+0xcc>)
 8000260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000264:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_CAN_Init+0xcc>)
 8000268:	2200      	movs	r2, #0
 800026a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800026c:	4b25      	ldr	r3, [pc, #148]	; (8000304 <MX_CAN_Init+0xcc>)
 800026e:	2200      	movs	r2, #0
 8000270:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_CAN_Init+0xcc>)
 8000274:	2200      	movs	r2, #0
 8000276:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <MX_CAN_Init+0xcc>)
 800027a:	2200      	movs	r2, #0
 800027c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_CAN_Init+0xcc>)
 8000280:	2200      	movs	r2, #0
 8000282:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000284:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <MX_CAN_Init+0xcc>)
 8000286:	2200      	movs	r2, #0
 8000288:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800028a:	481e      	ldr	r0, [pc, #120]	; (8000304 <MX_CAN_Init+0xcc>)
 800028c:	f000 fab0 	bl	80007f0 <HAL_CAN_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000296:	f000 f8c9 	bl	800042c <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */



  /* The CAN filter configuration */
    sFilterConfig.FilterBank = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0123<<5;
 80002a6:	f242 4360 	movw	r3, #9312	; 0x2460
 80002aa:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0123<<5;
 80002b0:	f242 4360 	movw	r3, #9312	; 0x2460
 80002b4:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; /* The data will be received in FIFO0 */
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80002be:	2301      	movs	r3, #1
 80002c0:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80002c2:	230e      	movs	r3, #14
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	4619      	mov	r1, r3
 80002ca:	480e      	ldr	r0, [pc, #56]	; (8000304 <MX_CAN_Init+0xcc>)
 80002cc:	f000 fb8b 	bl	80009e6 <HAL_CAN_ConfigFilter>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_CAN_Init+0xa2>
    {
      /* Filter configuration Error */
      Error_Handler();
 80002d6:	f000 f8a9 	bl	800042c <Error_Handler>
    }
   /* Starting the CAN peripheral */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80002da:	480a      	ldr	r0, [pc, #40]	; (8000304 <MX_CAN_Init+0xcc>)
 80002dc:	f000 fc4c 	bl	8000b78 <HAL_CAN_Start>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_CAN_Init+0xb2>
    {
      /* Start Error */
      Error_Handler();
 80002e6:	f000 f8a1 	bl	800042c <Error_Handler>
    }
   /* Activate CAN RX notification on FIFO0 */
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80002ea:	2102      	movs	r1, #2
 80002ec:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_CAN_Init+0xcc>)
 80002ee:	f000 fea6 	bl	800103e <HAL_CAN_ActivateNotification>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_CAN_Init+0xc4>
    {
      /* Notification Error */
      Error_Handler();
 80002f8:	f000 f898 	bl	800042c <Error_Handler>
    }

  /* USER CODE END CAN_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3728      	adds	r7, #40	; 0x28
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000030 	.word	0x20000030
 8000308:	40006400 	.word	0x40006400

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f001 ff70 	bl	8002228 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f86d 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000058 	.word	0x20000058
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_GPIO_Init+0x58>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <MX_GPIO_Init+0x58>)
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_GPIO_Init+0x58>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0320 	and.w	r3, r3, #32
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <MX_GPIO_Init+0x58>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_GPIO_Init+0x58>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <MX_GPIO_Init+0x58>)
 800039c:	f043 0308 	orr.w	r3, r3, #8
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <MX_GPIO_Init+0x58>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0308 	and.w	r3, r3, #8
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80003c6:	4a13      	ldr	r2, [pc, #76]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80003c8:	2100      	movs	r1, #0
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f000 fd26 	bl	8000e1c <HAL_CAN_GetRxMessage>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80003d6:	f000 f829 	bl	800042c <Error_Handler>
  }

  /* Transmit received data over UART */
  if (HAL_UART_Transmit(&huart1, RxData, 8, 100) != HAL_OK)
 80003da:	2364      	movs	r3, #100	; 0x64
 80003dc:	2208      	movs	r2, #8
 80003de:	490c      	ldr	r1, [pc, #48]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80003e2:	f001 ff6e 	bl	80022c2 <HAL_UART_Transmit>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* UART Transmission Error */
    Error_Handler();
 80003ec:	f000 f81e 	bl	800042c <Error_Handler>
  }
  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80003f4:	490b      	ldr	r1, [pc, #44]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80003f6:	480c      	ldr	r0, [pc, #48]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80003f8:	f000 fc02 	bl	8000c00 <HAL_CAN_AddTxMessage>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
  {
    /* Transmission request Error */
    Error_Handler();
 8000402:	f000 f813 	bl	800042c <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000cc 	.word	0x200000cc
 8000414:	200000b0 	.word	0x200000b0
 8000418:	20000058 	.word	0x20000058
 800041c:	200000d4 	.word	0x200000d4
 8000420:	20000000 	.word	0x20000000
 8000424:	20000098 	.word	0x20000098
 8000428:	20000030 	.word	0x20000030

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a2d      	ldr	r2, [pc, #180]	; (800056c <HAL_CAN_MspInit+0xd0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d153      	bne.n	8000564 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004bc:	4b2c      	ldr	r3, [pc, #176]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b26      	ldr	r3, [pc, #152]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a25      	ldr	r2, [pc, #148]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b23      	ldr	r3, [pc, #140]	; (8000570 <HAL_CAN_MspInit+0xd4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	481c      	ldr	r0, [pc, #112]	; (8000574 <HAL_CAN_MspInit+0xd8>)
 8000502:	f001 f8f3 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <HAL_CAN_MspInit+0xd8>)
 800051c:	f001 f8e6 	bl	80016ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_CAN_MspInit+0xdc>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
 8000526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000528:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800052c:	627b      	str	r3, [r7, #36]	; 0x24
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_CAN_MspInit+0xdc>)
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2014      	movs	r0, #20
 800054a:	f001 f898 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800054e:	2014      	movs	r0, #20
 8000550:	f001 f8b1 	bl	80016b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2015      	movs	r0, #21
 800055a:	f001 f890 	bl	800167e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800055e:	2015      	movs	r0, #21
 8000560:	f001 f8a9 	bl	80016b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40006400 	.word	0x40006400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010c00 	.word	0x40010c00
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <HAL_UART_MspInit+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d131      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <HAL_UART_MspInit+0x90>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_UART_MspInit+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_UART_MspInit+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005e2:	f001 f883 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005fc:	f001 f876 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <NMI_Handler+0x4>

0800061a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <MemManage_Handler+0x4>

08000626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <BusFault_Handler+0x4>

0800062c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <UsageFault_Handler+0x4>

08000632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065a:	f000 f889 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800066a:	f000 fd0d 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000030 	.word	0x20000030

08000678 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <CAN1_RX1_IRQHandler+0x10>)
 800067e:	f000 fd03 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000030 	.word	0x20000030

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000698:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800069a:	e003      	b.n	80006a4 <LoopCopyDataInit>

0800069c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800069e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006a2:	3104      	adds	r1, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006ac:	d3f6      	bcc.n	800069c <CopyDataInit>
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006b0:	e002      	b.n	80006b8 <LoopFillZerobss>

080006b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006b4:	f842 3b04 	str.w	r3, [r2], #4

080006b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006bc:	d3f9      	bcc.n	80006b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006be:	f7ff ffe5 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f001 ff71 	bl	80025a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fd41 	bl	800014c <main>
  bx lr
 80006ca:	4770      	bx	lr
  ldr r3, =_sidata
 80006cc:	08002638 	.word	0x08002638
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006d4:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80006d8:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80006dc:	200000dc 	.word	0x200000dc

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 ffb7 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fe9a 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ffcf 	bl	80016d2 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 ff97 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000008 	.word	0x20000008
 8000768:	20000010 	.word	0x20000010
 800076c:	2000000c 	.word	0x2000000c

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000010 	.word	0x20000010
 8000790:	200000d8 	.word	0x200000d8

08000794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	200000d8 	.word	0x200000d8

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffe0 	bl	8000794 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000010 	.word	0x20000010

080007f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e0ed      	b.n	80009de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fe44 	bl	800049c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 0202 	bic.w	r2, r2, #2
 8000822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000824:	f7ff ffb6 	bl	8000794 <HAL_GetTick>
 8000828:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800082a:	e012      	b.n	8000852 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800082c:	f7ff ffb2 	bl	8000794 <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b0a      	cmp	r3, #10
 8000838:	d90b      	bls.n	8000852 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2205      	movs	r2, #5
 800084a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e0c5      	b.n	80009de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e5      	bne.n	800082c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f042 0201 	orr.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000870:	f7ff ff90 	bl	8000794 <HAL_GetTick>
 8000874:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000876:	e012      	b.n	800089e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000878:	f7ff ff8c 	bl	8000794 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b0a      	cmp	r3, #10
 8000884:	d90b      	bls.n	800089e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2205      	movs	r2, #5
 8000896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e09f      	b.n	80009de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0e5      	beq.n	8000878 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7e1b      	ldrb	r3, [r3, #24]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d108      	bne.n	80008c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e007      	b.n	80008d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	7e5b      	ldrb	r3, [r3, #25]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d108      	bne.n	80008f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e007      	b.n	8000900 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7e9b      	ldrb	r3, [r3, #26]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d108      	bne.n	800091a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0220 	orr.w	r2, r2, #32
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e007      	b.n	800092a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f022 0220 	bic.w	r2, r2, #32
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7edb      	ldrb	r3, [r3, #27]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d108      	bne.n	8000944 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 0210 	bic.w	r2, r2, #16
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e007      	b.n	8000954 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f042 0210 	orr.w	r2, r2, #16
 8000952:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	7f1b      	ldrb	r3, [r3, #28]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d108      	bne.n	800096e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 0208 	orr.w	r2, r2, #8
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	e007      	b.n	800097e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f022 0208 	bic.w	r2, r2, #8
 800097c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	7f5b      	ldrb	r3, [r3, #29]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d108      	bne.n	8000998 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0204 	orr.w	r2, r2, #4
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e007      	b.n	80009a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 0204 	bic.w	r2, r2, #4
 80009a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	ea42 0103 	orr.w	r1, r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b087      	sub	sp, #28
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009fc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d003      	beq.n	8000a0c <HAL_CAN_ConfigFilter+0x26>
 8000a04:	7cfb      	ldrb	r3, [r7, #19]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	f040 80aa 	bne.w	8000b60 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a12:	f043 0201 	orr.w	r2, r3, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f003 031f 	and.w	r3, r3, #31
 8000a24:	2201      	movs	r2, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d123      	bne.n	8000a8e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	401a      	ands	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3248      	adds	r2, #72	; 0x48
 8000a6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a84:	6979      	ldr	r1, [r7, #20]
 8000a86:	3348      	adds	r3, #72	; 0x48
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d122      	bne.n	8000adc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ab6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3248      	adds	r2, #72	; 0x48
 8000abc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ad0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ad2:	6979      	ldr	r1, [r7, #20]
 8000ad4:	3348      	adds	r3, #72	; 0x48
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d109      	bne.n	8000af8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000af6:	e007      	b.n	8000b08 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b22:	e007      	b.n	8000b34 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d107      	bne.n	8000b4c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b52:	f023 0201 	bic.w	r2, r3, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e006      	b.n	8000b6e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
  }
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	371c      	adds	r7, #28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d12e      	bne.n	8000bea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ba4:	f7ff fdf6 	bl	8000794 <HAL_GetTick>
 8000ba8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000baa:	e012      	b.n	8000bd2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bac:	f7ff fdf2 	bl	8000794 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b0a      	cmp	r3, #10
 8000bb8:	d90b      	bls.n	8000bd2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2205      	movs	r2, #5
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e012      	b.n	8000bf8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1e5      	bne.n	8000bac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e006      	b.n	8000bf8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
  }
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c1e:	7ffb      	ldrb	r3, [r7, #31]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d003      	beq.n	8000c2c <HAL_CAN_AddTxMessage+0x2c>
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	f040 80b8 	bne.w	8000d9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10a      	bne.n	8000c4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d105      	bne.n	8000c4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 80a0 	beq.w	8000d8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	0e1b      	lsrs	r3, r3, #24
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d907      	bls.n	8000c6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e09e      	b.n	8000daa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	409a      	lsls	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10d      	bne.n	8000c9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c88:	68f9      	ldr	r1, [r7, #12]
 8000c8a:	6809      	ldr	r1, [r1, #0]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3318      	adds	r3, #24
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e00f      	b.n	8000cba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ca4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	440b      	add	r3, r1
 8000cb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	440b      	add	r3, r1
 8000cca:	3304      	adds	r3, #4
 8000ccc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	7d1b      	ldrb	r3, [r3, #20]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d111      	bne.n	8000cfa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3318      	adds	r3, #24
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	6811      	ldr	r1, [r2, #0]
 8000cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	061a      	lsls	r2, r3, #24
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3306      	adds	r3, #6
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3305      	adds	r3, #5
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	3204      	adds	r2, #4
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	ea43 0200 	orr.w	r2, r3, r0
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3303      	adds	r3, #3
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	061a      	lsls	r2, r3, #24
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	041b      	lsls	r3, r3, #16
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4610      	mov	r0, r2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	6811      	ldr	r1, [r2, #0]
 8000d58:	ea43 0200 	orr.w	r2, r3, r0
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	4413      	add	r3, r2
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3318      	adds	r3, #24
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e00e      	b.n	8000daa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e006      	b.n	8000daa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
  }
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d002      	beq.n	8000dd4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000dce:	7afb      	ldrb	r3, [r7, #11]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d11d      	bne.n	8000e10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e30:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d003      	beq.n	8000e40 <HAL_CAN_GetRxMessage+0x24>
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	f040 80f3 	bne.w	8001026 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10e      	bne.n	8000e64 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d116      	bne.n	8000e82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e0e7      	b.n	8001034 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d107      	bne.n	8000e82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0d8      	b.n	8001034 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	331b      	adds	r3, #27
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0204 	and.w	r2, r3, #4
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10c      	bne.n	8000eba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	331b      	adds	r3, #27
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	4413      	add	r3, r2
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	0d5b      	lsrs	r3, r3, #21
 8000eb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e00b      	b.n	8000ed2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	331b      	adds	r3, #27
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	331b      	adds	r3, #27
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4413      	add	r3, r2
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0202 	and.w	r2, r3, #2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	331b      	adds	r3, #27
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 020f 	and.w	r2, r3, #15
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	331b      	adds	r3, #27
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	3304      	adds	r3, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0a1a      	lsrs	r2, r3, #8
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0c1a      	lsrs	r2, r3, #16
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3302      	adds	r3, #2
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0e1a      	lsrs	r2, r3, #24
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0a1a      	lsrs	r2, r3, #8
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3305      	adds	r3, #5
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0c1a      	lsrs	r2, r3, #16
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3306      	adds	r3, #6
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0e1a      	lsrs	r2, r3, #24
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	e007      	b.n	8001022 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0220 	orr.w	r2, r2, #32
 8001020:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e006      	b.n	8001034 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_CAN_ActivateNotification+0x1e>
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d109      	bne.n	8001070 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6959      	ldr	r1, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e006      	b.n	800107e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d07c      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d023      	beq.n	8001120 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f983 	bl	80013f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80010f0:	e016      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	e00c      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	e002      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f986 	bl	800142c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d024      	beq.n	8001174 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001132:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f962 	bl	8001408 <HAL_CAN_TxMailbox1CompleteCallback>
 8001144:	e016      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	e00c      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
 800116c:	e002      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f965 	bl	800143e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f941 	bl	800141a <HAL_CAN_TxMailbox2CompleteCallback>
 8001198:	e016      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	e00c      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
 80011c0:	e002      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f944 	bl	8001450 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00c      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f92a 	bl	8001462 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f8c8 	bl	80003bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00c      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2210      	movs	r2, #16
 800124e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f90a 	bl	8001486 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8f2 	bl	8001474 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2210      	movs	r2, #16
 80012aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8f3 	bl	8001498 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2208      	movs	r2, #8
 80012cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8eb 	bl	80014aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d07b      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d072      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	2b00      	cmp	r3, #0
 8001344:	d043      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03e      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001356:	2b60      	cmp	r3, #96	; 0x60
 8001358:	d02b      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
 800135a:	2b60      	cmp	r3, #96	; 0x60
 800135c:	d82e      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 800135e:	2b50      	cmp	r3, #80	; 0x50
 8001360:	d022      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x320>
 8001362:	2b50      	cmp	r3, #80	; 0x50
 8001364:	d82a      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 8001366:	2b40      	cmp	r3, #64	; 0x40
 8001368:	d019      	beq.n	800139e <HAL_CAN_IRQHandler+0x316>
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	d826      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 800136e:	2b30      	cmp	r3, #48	; 0x30
 8001370:	d010      	beq.n	8001394 <HAL_CAN_IRQHandler+0x30c>
 8001372:	2b30      	cmp	r3, #48	; 0x30
 8001374:	d822      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 8001376:	2b10      	cmp	r3, #16
 8001378:	d002      	beq.n	8001380 <HAL_CAN_IRQHandler+0x2f8>
 800137a:	2b20      	cmp	r3, #32
 800137c:	d005      	beq.n	800138a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800137e:	e01d      	b.n	80013bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001388:	e019      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001392:	e014      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	f043 0320 	orr.w	r3, r3, #32
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800139c:	e00f      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013a6:	e00a      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b0:	e005      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013ba:	e000      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            break;
 80013bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f867 	bl	80014bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e272      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a14:	4b92      	ldr	r3, [pc, #584]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
 8001a2c:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x12c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d168      	bne.n	8001b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e24c      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x76>
 8001a5c:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a7f      	ldr	r2, [pc, #508]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a77      	ldr	r2, [pc, #476]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xbc>
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a71      	ldr	r2, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fe60 	bl	8000794 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fe5c 	bl	8000794 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e200      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe4>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe fe4c 	bl	8000794 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7fe fe48 	bl	8000794 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1ec      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x10c>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d11c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e1c0      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4939      	ldr	r1, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e03a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fe01 	bl	8000794 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b96:	f7fe fdfd 	bl	8000794 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1a1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4927      	ldr	r1, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fde0 	bl	8000794 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe fddc 	bl	8000794 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e180      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03a      	beq.n	8001c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d019      	beq.n	8001c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7fe fdc0 	bl	8000794 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7fe fdbc 	bl	8000794 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e160      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 fad8 	bl	80021ec <RCC_Delay>
 8001c3c:	e01c      	b.n	8001c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe fda6 	bl	8000794 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4a:	e00f      	b.n	8001c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7fe fda2 	bl	8000794 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d908      	bls.n	8001c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e146      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	42420000 	.word	0x42420000
 8001c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e9      	bne.n	8001c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a6 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe fd63 	bl	8000794 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe fd5f 	bl	8000794 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e103      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x312>
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e02d      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x334>
 8001d0e:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a69      	ldr	r2, [pc, #420]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	e01c      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x356>
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a60      	ldr	r2, [pc, #384]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fd13 	bl	8000794 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe fd0f 	bl	8000794 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0b1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x37e>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fcfd 	bl	8000794 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fcf9 	bl	8000794 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e09b      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d061      	beq.n	8001eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d146      	bne.n	8001e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fccd 	bl	8000794 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fcc9 	bl	8000794 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e06d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4921      	ldr	r1, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a19      	ldr	r1, [r3, #32]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe fc9d 	bl	8000794 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fc99 	bl	8000794 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46a>
 8001e7c:	e035      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fc86 	bl	8000794 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe fc82 	bl	8000794 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e026      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x498>
 8001eaa:	e01e      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e019      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x500>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fbd4 	bl	8000794 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fbd0 	bl	8000794 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fb32 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08002618 	.word	0x08002618
 80020c4:	20000008 	.word	0x20000008
 80020c8:	2000000c 	.word	0x2000000c

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_GetSysClockFreq+0xac>)
 80020d4:	1d3c      	adds	r4, r7, #4
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020dc:	f240 2301 	movw	r3, #513	; 0x201
 80020e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x46>
 800210a:	e02b      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	e02b      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3328      	adds	r3, #40	; 0x28
 800211c:	443b      	add	r3, r7
 800211e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002122:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0c5b      	lsrs	r3, r3, #17
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	3328      	adds	r3, #40	; 0x28
 800213a:	443b      	add	r3, r7
 800213c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002146:	fb03 f202 	mul.w	r2, r3, r2
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e004      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	623b      	str	r3, [r7, #32]
      break;
 8002162:	e002      	b.n	800216a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002166:	623b      	str	r3, [r7, #32]
      break;
 8002168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216a:	6a3b      	ldr	r3, [r7, #32]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bc90      	pop	{r4, r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	08002608 	.word	0x08002608
 800217c:	40021000 	.word	0x40021000
 8002180:	007a1200 	.word	0x007a1200
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08002628 	.word	0x08002628

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffde 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08002628 	.word	0x08002628

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000008 	.word	0x20000008
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e03f      	b.n	80022ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe f994 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800226a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f905 	bl	800247c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d17c      	bne.n	80023dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_UART_Transmit+0x2c>
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e075      	b.n	80023de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_UART_Transmit+0x3e>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e06e      	b.n	80023de <HAL_UART_Transmit+0x11c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002316:	f7fe fa3d 	bl	8000794 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x82>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002354:	e02a      	b.n	80023ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f840 	bl	80023e6 <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e036      	b.n	80023de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cf      	bne.n	8002356 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f810 	bl	80023e6 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023dc:	2302      	movs	r3, #2
  }
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	e02c      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d028      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <UART_WaitOnFlagUntilTimeout+0x30>
 8002406:	f7fe f9c5 	bl	8000794 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	429a      	cmp	r2, r3
 8002414:	d21d      	bcs.n	8002452 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002424:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e00f      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	429a      	cmp	r2, r3
 800246e:	d0c3      	beq.n	80023f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024b6:	f023 030c 	bic.w	r3, r3, #12
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <UART_SetConfig+0x114>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d103      	bne.n	80024ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024e4:	f7ff fe6e 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	e002      	b.n	80024f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024ec:	f7ff fe56 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80024f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009a      	lsls	r2, r3, #2
 80024fc:	441a      	add	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	4a22      	ldr	r2, [pc, #136]	; (8002594 <UART_SetConfig+0x118>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	0119      	lsls	r1, r3, #4
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fbb2 f2f3 	udiv	r2, r2, r3
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <UART_SetConfig+0x118>)
 800252a:	fba3 0302 	umull	r0, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a15      	ldr	r2, [pc, #84]	; (8002594 <UART_SetConfig+0x118>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002548:	4419      	add	r1, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <UART_SetConfig+0x118>)
 8002562:	fba3 0302 	umull	r0, r3, r3, r2
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	fb00 f303 	mul.w	r3, r0, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	3332      	adds	r3, #50	; 0x32
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <UART_SetConfig+0x118>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	440a      	add	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013800 	.word	0x40013800
 8002594:	51eb851f 	.word	0x51eb851f

08002598 <memset>:
 8002598:	4603      	mov	r3, r0
 800259a:	4402      	add	r2, r0
 800259c:	4293      	cmp	r3, r2
 800259e:	d100      	bne.n	80025a2 <memset+0xa>
 80025a0:	4770      	bx	lr
 80025a2:	f803 1b01 	strb.w	r1, [r3], #1
 80025a6:	e7f9      	b.n	800259c <memset+0x4>

080025a8 <__libc_init_array>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	2600      	movs	r6, #0
 80025ac:	4d0c      	ldr	r5, [pc, #48]	; (80025e0 <__libc_init_array+0x38>)
 80025ae:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <__libc_init_array+0x3c>)
 80025b0:	1b64      	subs	r4, r4, r5
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	42a6      	cmp	r6, r4
 80025b6:	d109      	bne.n	80025cc <__libc_init_array+0x24>
 80025b8:	f000 f81a 	bl	80025f0 <_init>
 80025bc:	2600      	movs	r6, #0
 80025be:	4d0a      	ldr	r5, [pc, #40]	; (80025e8 <__libc_init_array+0x40>)
 80025c0:	4c0a      	ldr	r4, [pc, #40]	; (80025ec <__libc_init_array+0x44>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	42a6      	cmp	r6, r4
 80025c8:	d105      	bne.n	80025d6 <__libc_init_array+0x2e>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d0:	4798      	blx	r3
 80025d2:	3601      	adds	r6, #1
 80025d4:	e7ee      	b.n	80025b4 <__libc_init_array+0xc>
 80025d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025da:	4798      	blx	r3
 80025dc:	3601      	adds	r6, #1
 80025de:	e7f2      	b.n	80025c6 <__libc_init_array+0x1e>
 80025e0:	08002630 	.word	0x08002630
 80025e4:	08002630 	.word	0x08002630
 80025e8:	08002630 	.word	0x08002630
 80025ec:	08002634 	.word	0x08002634

080025f0 <_init>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr

080025fc <_fini>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr
